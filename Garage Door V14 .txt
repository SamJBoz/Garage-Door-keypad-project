/*
Rules:
 - Pin code must be exactly 4 digits.
 - Garage Keypad only holds 10 separate Pin codes.
 */

#include <EEPROM.h>
//add in support for keypad
#include <Keypad.h>
const byte rows = 4;
const byte cols = 4;


char keys[rows][cols] = {
  {
    '1','2','3','U'          }
  , //U used to toggle door
  {
    '4','5','6','D'          }
  , //D used to toggle door
  {
    '7','8','9','*'          }
  , // * -used to delete all Pin codes.
  {
    'C','0','?','E'          } // C = clear, E -indicates a new Pin code to add, ? -used to enter a NEW Master code (4 digits)
};

byte rowPins[rows] = {
  //2, 3, 4, 5}; //connect to the row pin-outs of the keypad
 0, 1, 2, 3};
byte colPins[cols] = {
  //6, 7, 8, 9}; //connect to the column pin-outs of the keypad
 4, 5, 6, 7}; 
Keypad garageKeypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );

//********** User variables *********************************************
int pinPointer = 0; //initialize pinPointer variable
const int pinPointerSave = 250; //Save the pin pointer at EEProm address 250
String pinCode =  ""; //variable to hold Pin Codes (4) digits)
String temp = ""; //temporary variable used to compare strings
char pinChar; //Used to read individual characters from EEPROM
char mf = 'X'; //Used to hold Master Function code ('E' or '?')
char key; //Used to read in keypad key
boolean result; //Used to indicate true or false
int doorPin = 13;
int piezoPin = 10;  //pin for piezo transducer
int frequency = 1047; // frequency of sound
int gC = 1;
int rC = 0;
int gT = 0;
int rT = 0;
int greenLed = 12;
int redLed = 11;
int ledState = LOW;             // ledState used to set the LED
long previousMillis = 0;        // will store last time LED was updated
long interval = 500;           // interval at which to blink (milliseconds)

void setup(){ //*******************************************************************
  Serial.begin(9600);
  
  pinMode(doorPin, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(redLed, OUTPUT);
  pinMode(piezoPin, OUTPUT);
  
  
  digitalWrite(doorPin, LOW);    // make sure door switch is off!
  digitalWrite(greenLed, LOW); //turn green led off
  digitalWrite(redLed, LOW);  //turn red led off
  
  pinCode = ""; //initialize pinCode String
  garageKeypad.setDebounceTime(50);           // Default is 50mS
  initializeMaster(); //set Master pinCode to '1234' if there is no existing Master code
  gC = 1;  //set Green LED code to flash on and off every second
  rC = 0;  // set Red LED code to not flash at all. (Used for error codes)
}

void loop()//***********************************************************************
{
  key = garageKeypad.getKey();

  if (key)  //if a key was pressed then...*****************************************
  { 
    gC = 1;  //set Green LED code to flash on and off every second
    rC = 0;  // set Red LED code to not flash at all. (Used for error codes)
    
    result = pinCode.length()<4;  //check to see if pinCode has less than 4 characters
    switch (result) {
    case true:  //pinCode length < 4
      if (key >= 0x30 && key <= 0x39) addDigit();//If key is between 0 and 9....
      if (pinCode.length() == 4 && mf == 'X'){	// If pinCode == 4 && mf == 'X' then 
        if(checkPinCode(pinCode)){ //if pinCode is valid then ....
          toggleDoor(); //Go to toggleDoor() subroutine
          playBeep(2,100);
        }
        else if (checkMaster(pinCode) == false){ //else if the pinCode is NOT the Master code then...    
            message("PinCode was invalid");
            gC = 1;  //set Green LED code to flash  twice and then...
            rC = 1;  // set Red LED code to flash twice.
            playBeep(1,500);
            pinCode ="";
          }//End if !checkMaster
     
      }//End of pinCode.length

      else if (key == 'C'){ //If user pressed the 'C' key before entering all the 4 digits then....
        pinCode = "";  //clear the pinCode entry
        mf = 'X';  //reset Master flag to 'X'
        message("pinCode input cleared: Try again");
        playBeep(1,100);
      } 

      else if(key < 0x30 || key > 0x39){ //key is not a number but all 4 digits have not been entered
        message("A number was expected.");
        gC = 1;  //set Green LED code to flash  twice and then...
        rC = 2;  // set Red LED code to flash twice.
        playBeep(1,500);
        mf = 'X';
        pinCode="";
      }
      break; //case true

    case false: //pinCode length !< 4
      if (key >= 0x30 && key <= 0x39){    //Master code was entered but next key was a number
        message("Expected a function key but a number was entered");
        gC = 1;  //set Green LED code to flash  twice and then...
        rC = 3;  // set Red LED code to flash twice.
        playBeep(1,500);
        mf = 'X'; 
        pinCode="";
      }

      else{ //key is not numeric
        switch (key) {
        case 'E': //Enter new pin code=======================================================
          pinPointer = EEPROM.read(pinPointerSave);
          if (pinPointer < 10){
            switch(mf){
            case 'X': //new pincode needed
              result = checkMaster(pinCode);
              if (result == true){                                            
                mf = 'a';
                pinCode = "";
                playBeep(1,100);
                message("Ready to get new pin code");
                break;
              }

              else{ //result == false
                pinCode = "";
                message("Master Code is NOT Valid!");
                gC = 1;  //set Green LED code to flash  twice and then...
                rC = 4;  // set Red LED code to flash twice.
                playBeep(1,500);
                break;
              }

              break; //Case 'X'


            case 'a': // Pincode ready to be written
              //Check that new pin does not match existing Master Pin
              result = checkMaster(pinCode);
              if (result == true){                                            
                mf = 'X';
                pinCode = "";
                playBeep(1,100);
                message("New Pin Code matches existing Master Code!");
                gC = 2;  //set Green LED code to flash  twice and then...
                rC = 2;  // set Red LED code to flash twice.
                break;//case 'a'
              }
                //Else
                result = addPinCode(pinCode);
                pinCode="";
                mf = 'X';
                playBeep(1,100);
                break; // case 'a'

            }//end switch(mf)

          }  //END (pinPointer < 10)

          else{//pinPointer is NOT < 10
            message("The number of existing Pin codes are at the maximum of 10!");
            gC = 2;  //set Green LED code to flash  twice and then...
            rC = 1;  // set Red LED code to flash twice.
            playBeep(1,500);
            mf = 'X';
            pinCode ="";
          }//end of else

          break;//case 'E'

        case '*': //Erase all pin codes ===================================================

          result = checkMaster(pinCode);
          if (result == true){
            earasePinCodes();
            message("Pin Codes Erased!");
            pinCode="";
            playBeep(1,100);
          }

          else{
            message("Master Pin Code is NOT valid!");
            pinCode="";
            gC = 1;  //set Green LED code to flash  twice and then...
            rC = 4;  // set Red LED code to flash twice.
            playBeep(1,500);
          }

          break;//break case '*'


        case '?': //Enter new Master code =================================================
          pinPointer = EEPROM.read(pinPointerSave);                               
          switch(mf){
          case 'X': //new Master code needed
            result = checkMaster(pinCode);
            if (result == true){                                            
              mf = 'A';
              pinCode = "";
              message("Ready to get new Master code");
              playBeep(1,5100);
              break;
            }

            else{ //result == false
              pinCode = "";
              message("Master Pin Code is NOT Valid!");
              gC = 1;  //set Green LED code to flash  twice and then...
              rC = 4;  // set Red LED code to flash twice.
              playBeep(1,500);
              break;
            }

            break; //Case 'X'

          case 'A': // Master code ready to be written
            //Check to make sure New Master Code does not match any existing User Pin Codes
            result = checkPinCode(pinCode);
            if (result == true){                                            
              mf = 'X';
              pinCode = "";
              message("New Master Code matches an existing User Pin Code!");
              gC = 2;  //set Green LED code to flash  twice and then...
              rC = 3;  // set Red LED code to flash twice.
              playBeep(1,5100);
              break;
            }
            //ELSE
            addNewMaster(pinCode);
            pinCode="";
            mf = 'X';
            playBeep(1,100);
            break; // case 'A'

          }//end switch(mf)

          break;//Case '?'

        case 'C': //Clear input pinCode =============================================
          pinCode="";
          mf = 'X';
          message("Clear pinCode input");
          playBeep(1,100);
          break;//case 'C'

        default:
          message("A number was expected but a function key was entered instead!");
          gC = 1;  //set Green LED code to flash  twice and then...
          rC = 2;  // set Red LED code to flash twice.
          playBeep(1,500);
          break;      
        } //end switch (key)
      }//key is not numeric       
      break;//break case false

    default: 
      gC = 3;  //set Green LED code to flash  twice and then...
      rC = 3;  // set Red LED code to flash twice.
      playBeep(1,500);
      message("Unknown Error");
      break;
    }

  }//End of if(key) was pressed
  else if (!key){ //If key was NOT pressed
    unsigned long currentMillis = millis(); //get current timer
 
  if(currentMillis - previousMillis > interval) { 
    // save the last time you blinked the LED
    previousMillis = currentMillis;  
    interval = 500;
    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW)
      ledState = HIGH;
    else
      ledState = LOW;

    // set the LED with the ledState of the variable:
    toggleLedCode(ledState);
  } //End if(currentMillis - previousMillis > interval)
  }//End of if(key) was NOT pressed
  
}//End of loop 

// playBeep***************************************************************************
void playBeep(int repeat, int duration){
  for (int i = 0; i < repeat; i++){
tone(piezoPin, frequency, duration);
delay(duration * 1.30);
  }
}

//Toggele LEDS*************************************************************************
void toggleLedCode(int ledState){
  if (gT == 0 && rT == 0){
    gT = gC;
    rT = rC;}
  if (gT >0){
    digitalWrite(greenLed, ledState);
    if (ledState == LOW) gT--;}
  else if (gT == 0 && rT > 0){
    digitalWrite(redLed, ledState);
    if (ledState == LOW) rT--;
    if (ledState == LOW && rT == 0)  interval = 1000;
  }
}


//Toggle door *********************************************************************
void toggleDoor(){
message("Pin Code was OK!: Toggling door");
pinCode = "";
digitalWrite(13, HIGH);   //Toggle door switch ON
delay(1000); //wait 1 second
digitalWrite(13, LOW);   //Toggle door switch OFF

}


// Add new Master code *************************************************************
void addNewMaster(String pinCode)
{
  for (int i = 0; i < 4; i++){   
    EEPROM.write(i+4,pinCode.charAt(i));
  }  
  message("New Master code was added");
}//End addNewMaster(pinCode)


// Check user pinCode and return 'true' if it is valid
boolean checkPinCode(String pinCode){ //*********************************************
  temp = ""; //initialize compare variable
  pinPointer = EEPROM.read(pinPointerSave); //Get the pinPointer (0-9);
  for(int i = 0; i < pinPointer +1; i++ ){ // cycle through saved pin code addresses
    for (int j = 0 ; j < 4; j++){  //cycle through each digit of  current pin code
      pinChar = EEPROM.read((i+2)*4+j); //read in 4 digits into temp variable
      temp += pinChar;
    }//End for int j   
    if (temp == pinCode) {
      temp = "";
      return true;
    }
    else{
      temp="";
    }

  } //End for int i
  return false; // Pin code not found
} //end function checkPinCode


// Add a new pinCode and return True or False (Success or Failure)
boolean addPinCode(String pinCode)//*****************************************************
{ 
  
  pinPointer = EEPROM.read(pinPointerSave); //Read the pinPointer (Max 10)

  //Write pinCode to next memory spot
  for (int i = 0; i < 4; i++) {  
    EEPROM.write(((pinPointer+2)*4+i),pinCode.charAt(i));
  }
  //Now read it back and check that it is correct
  for (int i = 0; i < 4; i++){   
    if((EEPROM.read((pinPointer+2)*4+i))!= pinCode.charAt(i)){
      message("Pin code did not write into memory properly!");
      return false;
    }
  } // If any digit was incorrect then exit with 'false'

  pinPointer++; //Add 1 to pinPointer
  EEPROM.write(pinPointerSave,pinPointer); //Write new pinPonter value back to pinPointerSave address
  message("Pin code was added successfully!");
  Serial.println(pinPointer);
  return true;//All digits were correct so return 'true'
}//End addPinCode(String pinCode)


// Message function //**************************************************************
void message(String Message)
{
  Serial.println(Message);
}


// Append digit to pinCode**********************************************************
void addDigit()
{
  if(pinCode.length() < 4)
  {
    pinCode += key;
    Serial.println("Adding digit to pinCode");
    Serial.println("Pin Code = " + pinCode);
  }  

  else 
  {
    Serial.println("Extra digit: Try again: pinCode cleared");
    pinCode = "";
  }
}



// Creates a 'Default' master PinCode (1234) if none exists.
void initializeMaster(){ //**********************************************************************
  // initialize string variable
  pinCode = "";
  //Get first 4 char of EEProm memory
  for (int i = 0; i < 4; i++) {
    pinChar = (EEPROM.read(i));
    pinCode += pinChar;
  }
  // If masterCode does not equal 'MAST' then
  // write 'MAST1234' into first 8 bytes of EEProm memory
  if (pinCode != "MAST") 
  {
    Serial.println("Master code does NOT exist");
    pinCode = "MAST";
    for (int i = 0; i < 4; i++) 
    {  
      EEPROM.write(i,pinCode.charAt(i));
    }
    pinCode = "1234";     
    for (int i = 4; i < 8; i++) 
    {    
      EEPROM.write(i,pinCode.charAt(i-4));
    }
    // Since this is a new set we will reset the pinPoniter to '0'
    // and save this value to EEProm address '250'
    pinPointer = 0;
    EEPROM.write(pinPointerSave,pinPointer); 
    pinPointer = EEPROM.read(pinPointerSave);
    Serial.println("Initialized pinPointer = ");
    Serial.println(pinPointer);
    pinCode="";
  }
  else {
    //If this is not a new set then we will load the pinPointer into variable
    Serial.println("Master code DOES exist");
     //Get 4 characters of Master Pin
     pinCode="";
    for (int i = 4; i < 8; i++) {
    pinChar = (EEPROM.read(i));
    pinCode += pinChar;
  }
    pinPointer = EEPROM.read(pinPointerSave);
    Serial.println("Existing pinCode = " + pinCode);
    Serial.println("Existing pinPointer = ");
    Serial.println(pinPointer);
    pinCode="";
  }
  pinCode="";
}// End of initializeMaster function


// Function to erase all pinCodes by resetting the pinPointer to zero
void earasePinCodes() { // *******************************************************************
  EEPROM.write(pinPointerSave,0);
}

//Function to check for valid MasterCode
boolean checkMaster(String mastCode)
{
  temp = "";
  //Get first 4 char of EEProm memory
  for (int i = 4; i < 8; i++) 
  {
    pinChar = (EEPROM.read(i));
    temp += pinChar;
  } 
  if(temp == mastCode)
  {
    return true;
  }
  return false;
}




